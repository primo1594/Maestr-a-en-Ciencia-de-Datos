dataHurtoPersonas$Departamento<-gsub("SANANDRES", 'ARCHIPIELAGODESANANDRES', dataHurtoPersonas$Departamento)
kable(head(dataHurtoPersonas[,1:10],n = 3))
dataCaracGen <- read.delim("CaracteristicasGenerales.txt", sep = " ")
#head(dataCaracGen)
dataVivienda <- read.delim("DatosVivienda.txt",sep = " ")
#head(dataVivienda)
dataPercepSeg <- read.delim("PercepcionSeguridad.txt",sep = "\t")
#El separador de este era \t en vez de espacio.
#head(dataPercepSeg)
dataMerged1 = merge(dataCaracGen, dataVivienda, by.x=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"),
by.y=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"))
#head(dataMerged1)
dataMerged2 = merge(dataMerged1,dataPercepSeg, by.x=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"),
by.y=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"))
kable(head(dataMerged2[,1:10]))
#head(dataProyMunStand)
dataProyMunStand$DPNOM<-as.factor(dataProyMunStand$DPNOM)
dataProyMunStand$MPIO<-as.factor(dataProyMunStand$MPIO)
kable(sapply(dataProyMunStand,class))
#kable(summary(dataProyMunStand))
#head(dataHurtoPersonas)
#View(dataHurtoPersonas)
dataHurtoPersonas2 <- dataHurtoPersonas
#Fecha estÃ¡ como Factor y debe ser Date
dataHurtoPersonas2$Fecha<-as.Date(dataHurtoPersonas2$Fecha,"%m/%d/%Y")
#head(dataHurtoPersonas2[185099,])
#sapply(dataHurtoPersonas2,class)
#Departamento y Municipio son character y deben ser factor
dataHurtoPersonas2$Departamento <- as.factor(dataHurtoPersonas2$Departamento)
dataHurtoPersonas2$Municipio<- as.factor(dataHurtoPersonas2$Municipio)
dataHurtoPersonas2$CodigoDANE <- as.factor(dataHurtoPersonas2$CodigoDANE)
dataHurtoPersonas2$Hora <- as.factor(substr(dataHurtoPersonas2$Hora,11,22))
kable(sapply(dataHurtoPersonas2,class))
#summary(dataHurtoPersonas2)
#View(dataHurtoPersonas2)
#head(dataMerged2)
#View(dataMerged2)
#str(dataMerged3)
dataMerged3 <- dataMerged2
dataMerged3[,6:44]<-lapply(dataMerged3[,6:44],as.factor)
dataMerged3[,"P5785"]<-as.integer(dataMerged3[,"P5785"])
kable(sapply(dataMerged2,class))
dataSorted<-dataProyMunStand[which(duplicated(dataProyMunStand["MPIO"])==TRUE),]
dataSorted<-dataSorted[order(dataSorted$MPIO,dataSorted$DPNOM),]
kable(dataSorted[2:5,])
##duplicated(dataProyMunStand["DPNOM","MPIO"])
##which(duplicated(dataHurtoPersonas2[colnames(dataHurtoPersonas2)]))
##table(is.na(dataProyMunStand))
kable(table(is.na(dataHurtoPersonas2)))
plot(pressure)
summary(dataProyMunStand)
dataProyMunStand2<-dataProyMunStand
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM,
levels=names(sort(table(dataProyMunStand2$DPNOM),
decreasing=TRUE))))
ggplot(dataProyMunStand2,aes(x=dataProyMunStand2$DPNOM))+
geom_bar()+coord_flip()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM,
levels=names(sort(table(dataProyMunStand2$DPNOM),
decreasing=FALSE))))
ggplot(dataProyMunStand2,aes(x=dataProyMunStand2$DPNOM))+
geom_bar()+coord_flip()
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_boxplot()
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_histogram()
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_bar()
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_bar()
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_bar(stat="identity")
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_bar(stat="identity")+coord_flip()
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM,
levels=names(sort(dataProyMunStand$`2017`),
decreasing=FALSE))))
sort(dataProyMunStand$`2017`
sort(dataProyMunStand$`2017`)
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM,
levels=names(sort(dataProyMunStand$`2017`,
decreasing=FALSE))))
ggplot(dataProyMunStand2,aes(x=dataProyMunStand2$DPNOM))+
geom_bar()+coord_flip()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#install.packages("knitr")
#install.packages("readxl")
#install.packages("rmarkdown")
library(knitr)
library(readxl)
library(rmarkdown)
dataProyMun<-readxl::read_xls("ProyeccionMunicipios2005_2020.xls")
kable(dataProyMun[c(1:10),c(1:8)])
dataProyMun2<-dataProyMun[-c(1,2,3),]
#head(dataProyMun2)
colnames(dataProyMun2)<-dataProyMun2[1,]
#head(dataProyMun2)
dataProyMun2<-dataProyMun2[-1,]
kable(head(dataProyMun2[,c(1:12)]))
dataProyMun3<-dataProyMun2[,-which(colnames(dataProyMun2) %in% c("DP","DPMP"))]
#head(dataProyMun3)
#which(as.numeric(colnames(dataProyMun3))<"2017")
dataProyMun3<-dataProyMun3[,-which(as.numeric(colnames(dataProyMun3))<2017)]
#head(dataProyMun3)
dataProyMun3<-dataProyMun3[,-which(as.numeric(colnames(dataProyMun3))>2017)]
#head(dataProyMun3)
dataProyMunFinal<-dataProyMun3[,-c(4,5)]
kable(head(dataProyMunFinal))
kable(tail(dataProyMunFinal,n = 15))##1124
dataProyMunFinal<-dataProyMunFinal[-c(1124:1135),]
#kable(tail(dataProyMunFinal))
dataProyMunFinal<-dataProyMunFinal[-c(1123),]
kable(tail(dataProyMunFinal))
dataProyMunStand<-dataProyMunFinal
#Eliminar tildes
dataProyMunStand$DPNOM<-iconv(dataProyMunStand$DPNOM,from="UTF-8", to="ASCII//TRANSLIT")
dataProyMunStand$MPIO<-iconv(dataProyMunStand$MPIO,from="UTF-8", to="ASCII//TRANSLIT")
#Eliminar espacios y puntuaciÃ³n
dataProyMunStand$DPNOM<-gsub("\\s|\\.|\\,", '', dataProyMunStand$DPNOM)
dataProyMunStand$MPIO<-gsub("\\s|\\.|\\,", '', dataProyMunStand$MPIO)
#Convertir todo a mayÃºsculas
dataProyMunStand$DPNOM<-toupper(dataProyMunStand$DPNOM)
dataProyMunStand$MPIO<-toupper(dataProyMunStand$MPIO)
#El DANE toma a BogotÃ¡ como otro departamento diferente a Cundinamarca y para efectos de nuestro anÃ¡lisis y el merge con otros datasets deben ser el mismo.
dataProyMunStand$DPNOM<-gsub("BOGOTADC", 'CUNDINAMARCA', dataProyMunStand$DPNOM)
#Eliminar abreviaturas dentro de parÃ©ntesis que salen al lado de los nombres. Ejemplo: (CD)
dataProyMunStand$MPIO<-gsub("[:(:]CD[:):]|\\s|[:(:]1[:):]|[:(:]3[:):]|\\.|\\,|[:(:]2[:):]", '', dataProyMunStand$MPIO)
kable(tail(dataProyMunStand))
dataHurtoPersonas<-read.csv(file="HurtoANSI.csv",sep=",")
kable(head(dataHurtoPersonas[,1:10],n = 3))
##Esto quita puntos de los nombres de las columnas
colnames(dataHurtoPersonas) <- gsub("\\.", "", colnames(dataHurtoPersonas))
##Esto quita las tildes
colnames(dataHurtoPersonas) <- iconv(colnames(dataHurtoPersonas),to="ASCII//TRANSLIT")
kable(head(dataHurtoPersonas[,1:10],n = 3))
##Esto quita el CT y espacios del nombre del municipio
dataHurtoPersonas$Municipio<-gsub("\\s|[:(:]CT[:):]|\\.|\\,", '', dataHurtoPersonas$Municipio)
##Esto quita los signos de puntuaciÃ³n y espacios
dataHurtoPersonas$Departamento<-gsub("\\s|\\.|\\,", '', dataHurtoPersonas$Departamento)
##Esto unifica nombres de municipios
dataHurtoPersonas$Municipio<-gsub("PUERTOLEGUIZAMO", 'LEGUIZAMO', dataHurtoPersonas$Municipio)
dataHurtoPersonas$Municipio<-gsub("CHIBOLO", 'CHIVOLO', dataHurtoPersonas$Municipio)
##Esto quita las tildes
dataHurtoPersonas$Municipio<-iconv(dataHurtoPersonas$Municipio,to="ASCII//TRANSLIT")
dataHurtoPersonas$Departamento<-iconv(dataHurtoPersonas$Departamento,to="ASCII//TRANSLIT")
#Esto pone en mayuscula
dataHurtoPersonas$Departamento<-toupper(dataHurtoPersonas$Departamento)
dataHurtoPersonas$Municipio<-toupper(dataHurtoPersonas$Municipio)
##Esto unifica nombres de departamentos
dataHurtoPersonas$Departamento<-gsub("VALLE", 'VALLEDELCAUCA', dataHurtoPersonas$Departamento)
dataHurtoPersonas$Departamento<-gsub("GUAJIRA", 'LAGUAJIRA', dataHurtoPersonas$Departamento)
dataHurtoPersonas$Departamento<-gsub("SANANDRES", 'ARCHIPIELAGODESANANDRES', dataHurtoPersonas$Departamento)
kable(head(dataHurtoPersonas[,1:10],n = 3))
dataCaracGen <- read.delim("CaracteristicasGenerales.txt", sep = " ")
#head(dataCaracGen)
dataVivienda <- read.delim("DatosVivienda.txt",sep = " ")
#head(dataVivienda)
dataPercepSeg <- read.delim("PercepcionSeguridad.txt",sep = "\t")
#El separador de este era \t en vez de espacio.
#head(dataPercepSeg)
dataMerged1 = merge(dataCaracGen, dataVivienda, by.x=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"),
by.y=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"))
#head(dataMerged1)
dataMerged2 = merge(dataMerged1,dataPercepSeg, by.x=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"),
by.y=c("DIRECTORIO", "SECUENCIA_ENCUESTA","SECUENCIA_P","ORDEN","FEX_C"))
kable(head(dataMerged2[,1:10]))
#head(dataProyMunStand)
dataProyMunStand$DPNOM<-as.factor(dataProyMunStand$DPNOM)
dataProyMunStand$MPIO<-as.factor(dataProyMunStand$MPIO)
kable(sapply(dataProyMunStand,class))
#kable(summary(dataProyMunStand))
#head(dataHurtoPersonas)
#View(dataHurtoPersonas)
dataHurtoPersonas2 <- dataHurtoPersonas
#Fecha estÃ¡ como Factor y debe ser Date
dataHurtoPersonas2$Fecha<-as.Date(dataHurtoPersonas2$Fecha,"%m/%d/%Y")
#head(dataHurtoPersonas2[185099,])
#sapply(dataHurtoPersonas2,class)
#Departamento y Municipio son character y deben ser factor
dataHurtoPersonas2$Departamento <- as.factor(dataHurtoPersonas2$Departamento)
dataHurtoPersonas2$Municipio<- as.factor(dataHurtoPersonas2$Municipio)
dataHurtoPersonas2$CodigoDANE <- as.factor(dataHurtoPersonas2$CodigoDANE)
dataHurtoPersonas2$Hora <- as.factor(substr(dataHurtoPersonas2$Hora,11,22))
kable(sapply(dataHurtoPersonas2,class))
#summary(dataHurtoPersonas2)
#View(dataHurtoPersonas2)
#head(dataMerged2)
#View(dataMerged2)
#str(dataMerged3)
dataMerged3 <- dataMerged2
dataMerged3[,6:44]<-lapply(dataMerged3[,6:44],as.factor)
dataMerged3[,"P5785"]<-as.integer(dataMerged3[,"P5785"])
kable(sapply(dataMerged2,class))
dataSorted<-dataProyMunStand[which(duplicated(dataProyMunStand["MPIO"])==TRUE),]
dataSorted<-dataSorted[order(dataSorted$MPIO,dataSorted$DPNOM),]
kable(dataSorted[2:5,])
##duplicated(dataProyMunStand["DPNOM","MPIO"])
##which(duplicated(dataHurtoPersonas2[colnames(dataHurtoPersonas2)]))
##table(is.na(dataProyMunStand))
kable(table(is.na(dataHurtoPersonas2)))
plot(pressure)
dataProyMunStand2<-dataProyMunStand
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_bar(stat="identity")+coord_flip()
dataProyMunStand2 <- transform(dataProyMunStand2, dataProyMunStand2$DPNOM=reorder(dataProyMunStand2$DPNOM, dataProyMunStand2$`2017`))
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM, levels = dataProyMunStand2$DPNOM[order(dataProyMunStand2$`2017`)])
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM, levels = dataProyMunStand2$DPNOM[order(dataProyMunStand2$`2017`)])))
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM, levels = dataProyMunStand2$DPNOM[order(dataProyMunStand2$`2017`)]))
dataProyMunStand2<-dataProyMunStand
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM, levels = dataProyMunStand2$DPNOM[order(dataProyMunStand2$`2017`)])
dataProyMunStand2<-dataProyMunStand
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM,
levels=names(sort(table(dataProyMunStand2$DPNOM),
decreasing=FALSE))))
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM,
levels=names(sort(table(dataProyMunStand2$DPNOM),
decreasing=FALSE))))
dataProyMunStand2<-dataProyMunStand
ggplot(dataProyMunStand2, aes(x = reorder(dataProyMunStand2$DPNOM, -dataProyMunStand2$`2017`), y = dataProyMunStand2$`2017`)) + geom_bar(stat = "identity")
ggplot(dataProyMunStand2, aes(x = reorder(dataProyMunStand2$DPNOM, -dataProyMunStand2$`2017`), y = dataProyMunStand2$`2017`)) +
geom_bar(stat = "identity")+coord_flip()
?reorder
ggplot(dataProyMunStand2, aes(x = reorder(dataProyMunStand2$DPNOM, dataProyMunStand2$`2017`), y = dataProyMunStand2$`2017`)) +
geom_bar(stat = "identity")+coord_flip()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataProyMunStand2 <- within(dataProyMunStand2,
dataProyMunStand2$DPNOM <- factor(dataProyMunStand2$DPNOM,
levels=names(sort(table(dataProyMunStand2$DPNOM),
decreasing=FALSE))))
ggplot(dataProyMunStand2, aes(x = reorder(dataProyMunStand2$DPNOM, dataProyMunStand2$`2017`), y = dataProyMunStand2$`2017`)) +
geom_bar(stat = "identity")+coord_flip()
ggplot(dataProyMunStand,aes(x=dataProyMunStand$DPNOM,y=dataProyMunStand$`2017`))+
geom_bar(stat="identity")+coord_flip()
ggplot(dataProyMunStand2,aes(x=dataProyMunStand2$DPNOM))+
geom_bar()+coord_flip()
ggplot(dataProyMunStand2, aes(x = reorder(dataProyMunStand2$DPNOM, dataProyMunStand2$`2017`), y = dataProyMunStand2$`2017`)) +
geom_bar(stat = "identity")+coord_flip()
ggplot(dataProyMunStand2, aes(x = reorder(dataProyMunStand2$DPNOM, dataProyMunStand2$`2017`), y = dataProyMunStand2$`2017`)) +
geom_bar(stat = "identity")+coord_flip()
library(ggplot2)
summary(dataHurtoPersonas2)
summary(dataHurtoPersonas2)
ggplot(dataHurtoPersonas2,aes(x=dataHurtoPersonas2$Departamento))+
geom_bar()+coord_flip()
dataHurtoPersonas3 <- dataHurtoPersonas2
dataHurtoPersonas3 <- within(dataHurtoPersonas3,
dataHurtoPersonas3$Departamento <- factor(dataHurtoPersonas3$Departamento,
levels=names(sort(table(dataHurtoPersonas3$Departamento),
decreasing=FALSE))))
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Departamento))+
geom_bar()+coord_flip()
dataHurtoPersonas3 <- dataHurtoPersonas2
dataHurtoPersonas3 <- within(dataHurtoPersonas3,
dataHurtoPersonas3$Departamento <- factor(dataHurtoPersonas3$Departamento,
levels=names(sort(table(dataHurtoPersonas3$Departamento),
decreasing=FALSE))))
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Departamento))+
geom_bar()+coord_flip()
summary(dataHurtoPersonas2)
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Dia))+
geom_bar()+coord_flip()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Dia))+
geom_bar()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataHurtoPersonas3$Dia<-factor(dataHurtoPersonas3$Dia,levels=c("Lunes","Martes","Miércoles","Jueves","Viernes","Sábado","Domingo"))
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Dia))+
geom_bar()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataHurtoPersonas3$Dia<-factor(dataHurtoPersonas3$Dia,levels=c("Lunes","Martes","Miércoles","Jueves","Viernes","Sábado","Domingo"))
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Dia))+
geom_bar()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataHurtoPersonas3$Dia<-factor(dataHurtoPersonas3$Dia,ordered=c("Lunes","Martes","Miércoles","Jueves","Viernes","Sábado","Domingo"))
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Dia))+
geom_bar()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
dataHurtoPersonas3$Dia<-factor(dataHurtoPersonas3$Dia,levels=c("Lunes","Martes","Miércoles","Jueves","Viernes","Sábado","Domingo"))
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Dia))+
geom_bar()
##Los departamentos con más cantidad de hurtos son cundinamarca, antioquia y valle (Porque tienen mayor número de personas)
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Dia))+
geom_bar()
##Todos los días son igual de peligrosos
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Hora))+
geom_bar()
##Todos los días son igual de peligrosos
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Hora))+
geom_boxplot()
##Todos los días son igual de peligrosos
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Hora))+
geom_boxplot(stat = "identity")
##Todos los días son igual de peligrosos
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Hora))+
geom_histogram()
##Todos los días son igual de peligrosos
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Hora))+
geom_bar()
##Todos los días son igual de peligrosos
summary(dataHurtoPersonas3$Hora)
##Todos los días son igual de peligrosos
kable(summary(dataHurtoPersonas3$Hora))
##Todos los días son igual de peligrosos
kable(summary(dataHurtoPersonas3$Hora,5))
##Todos los días son igual de peligrosos
kable(summary(dataHurtoPersonas3$Hora,10))
##La media noche es la hora más peligrosa
##Más hurtos en Vías públicas (Evidentemente)
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Armaempleada))+
geom_bar()
##La media noche es la hora más peligrosa
##Más hurtos en Vías públicas (Evidentemente)
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Armaempleada))+
geom_bar()+coord_flip()
##La media noche es la hora más peligrosa
##Más hurtos en Vías públicas (Evidentemente)
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$Armaempleada))+
geom_bar()+coord_flip()+xlab("Arma empleada")+ylab("Cantidad de hurtos")
##Más hurtos sin empleo de armas
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$MovilAgresor))+
geom_bar()+coord_flip()+xlab("Arma empleada")+ylab("Cantidad de hurtos")
##Más hurtos sin empleo de armas
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$MovilAgresor))+
geom_bar()+coord_flip()+xlab("Movilidad del agresos")+ylab("Cantidad de hurtos")
ggplot(dataHurtoPersonas3,aes(x=dataHurtoPersonas3$MovilVictima))+
geom_bar()+coord_flip()+xlab("Movilidad del agresor")+ylab("Cantidad de hurtos")
plot(dataHurtoPersonas3)
coef(dataHurtoPersonas3)
plot(dataHurtoPersonas3)
summary(dataHurtoPersonas3)
summary(dataHurtoPersonas2)
summary(dataHurtoPersonas2$Estadocivil)
kable(summary(dataHurtoPersonas2$Estadocivil))
summary(dataHurtoPersonas2)
kable(summary(dataHurtoPersonas2$Clasedeempleado))
summary(dataHurtoPersonas2)
kable(summary(dataHurtoPersonas2))
head(dataHurtoPersonas2)
head(dataHurtoPersonas2)
head(dataProyMunStand2)
head(dataProyMunStand)
dataProyMun<-readxl::read_xls("ProyeccionMunicipios2005_2020.xls")
kable(dataProyMun[c(1:10),c(1:8)])
dataProyMun2<-dataProyMun[-c(1,2,3),]
#head(dataProyMun2)
colnames(dataProyMun2)<-dataProyMun2[1,]
#head(dataProyMun2)
dataProyMun2<-dataProyMun2[-1,]
kable(head(dataProyMun2[,c(1:12)]))
View(dataProyMunStand)
dataMerged3 = merge(dataHurtoPersonas2, dataProyMunStand, by.x=c("Departamento", "Municipio"),
by.y=c("DPNOM", "MPIO"))
View(dataMerge3)
View(dataMerged3)
table(dataHurtoPersonas2)
table(dataHurtoPersonas2$Departamento)
table(dataHurtoPersonas2$Departamento,dataHurtoPersonas2$Armaempleada)
install.packages("ellipse")
install.packages("caret")
install.packages("klaR")
library(caret)
library(klaR)
library(ggplot2)
library(class)
setwd("F:/GitHub/Maestría en Ciencia de Datos/Fundamentos de Analítica/Clase 5")
churn <- read.table("04-02-churn.csv",sep = ";", header = TRUE)
summary(churn)
str(churn)
table(churn$LEAVE)
prop.table(table(churn$LEAVE))
?prop.table
#¿Qué ven de particular en los datos?
#...Que están limpios. No hay NAs ni duplicados.Aparentemente tienen el tipo de dato correcto.
colnames(churn)
rownames(churn)[1:4]
nrow(churn)
ncol(churn)
churn[1:4,]
churn[1:4,2:4]
churn$LEAVE[1:5]
churn[1:10,c(1,5)]
ggplot(churn, aes(x=HOUSE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=OVERAGE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=INCOME)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=LEFTOVER)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=REPORTED_SATISFACTION)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=HOUSE, y=OVERAGE, color=LEAVE)) + geom_point(size=2, alpha=.5)
ggplot(churn, aes(x=HOUSE, y=INCOME, color=LEAVE)) + geom_point(size=2, alpha=.5)
ggplot(churn, aes(x=INCOME, y=OVERAGE, color=LEAVE)) + geom_point(size=2, alpha=.5)
ggplot(churn, aes(x=LEFTOVER, y=OVERAGE, color=LEAVE)) + geom_point(size=2, alpha=.5)
ggplot(churn, aes(x=HOUSE, y=REPORTED_SATISFACTION, color=LEAVE)) + geom_jitter(size=2, alpha=.5)
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000,]$LEAVE,
plot = "pairs")
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000,"LEAVE"],
plot="ellipse")
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000,"LEAVE"],
plot="ellipse",
auto.key=list(columns=2))
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000, 12],
plot="density",
auto.key=list(columns=2))
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000, 12],
plot="density",
scales=list(x=list(relation="free"),
y=list(relation="free")),
auto.key=list(columns=2))
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000, 12],
plot="box",
scales=list(x=list(relation="free"), y=list(relation="free")))
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000, 12],
plot="strip",
scales=list(x=list(relation="free"),
y=list(relation="free")))
featurePlot(x = churn[1:2000, c(2, 3, 4, 5)],
y = churn[1:2000, 12],
plot="strip",
scales=list(x=list(relation="free"),
y=list(relation="free")),
jitter=TRUE)
ggplot(churn, aes(x=HOUSE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=OVERAGE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=INCOME)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=LEFTOVER)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=HOUSE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
#Entre más valor tiene la vivienda más probabilidad de que se quede en el servicio hay
ggplot(churn, aes(x=OVERAGE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=HOUSE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
#Entre más valor tiene la vivienda más probabilidad de que se quede en el servicio hay y viceversa
ggplot(churn, aes(x=OVERAGE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
#Entre más sobrecargas más probabilidad de que abandonen y viceversa
ggplot(churn, aes(x=INCOME)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=HOUSE)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
#Entre más sobrecargas más probabilidad de que abandonen y viceversa
ggplot(churn, aes(x=INCOME)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
#Entre más ganancias más probabilidad de que abandonen y viceversa
ggplot(churn, aes(x=LEFTOVER)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
ggplot(churn, aes(x=REPORTED_SATISFACTION)) + geom_density(aes(group=LEAVE, colour=LEAVE, fill=LEAVE), alpha=0.3)
?set.seed
trainIndex = sample(nrow(churn),nrow(churn)*0.75,replace=FALSE)
trainIndex[1:10]
set.seed(3456)
trainIndex = sample(nrow(churn),nrow(churn)*0.75,replace=FALSE)
trainIndex[1:10]
lenght(trainIndex)
length(trainIndex)
churnTrain <- churn[trainIndex,]
churnTest <- churn[-trainIndex,]
churnTrainNum <- churnTrain[, c(2,3,4,5,6,7,8)]
churnTestNum <- churnTest[, c(2,3,4,5,6,7,8)]
promedios <- apply(churnTrainNum, MARGIN=2, FUN=mean)
desviaciones <- apply(churnTrainNum, MARGIN=2, FUN=sd)
churnTrainNorm <- t(apply(churnTrainNum, MARGIN=1, FUN=function(x) (x - promedios)/desviaciones))
churnTestNorm  <- t(apply(churnTestNum,  MARGIN=1, FUN=function(x) (x - promedios)/desviaciones))
predictions <- knn(train=churnTrainNorm,
test=churnTestNorm,
churnTrain[, 12],
k=13)
table(predictions, churnTest[,12])
(table(predictions, churnTest[,12])[1]+table(predictions, churnTest[,12])[4]) / 5000
set.seed(3457)
trainIndex = sample(nrow(churn),nrow(churn)*0.75,replace=FALSE)
trainIndex[1:10]
length(trainIndex)
churnTrain <- churn[trainIndex,]
churnTest <- churn[-trainIndex,]
churnTrainNum <- churnTrain[, c(2,3,4,5,6,7,8)]
churnTestNum <- churnTest[, c(2,3,4,5,6,7,8)]
promedios <- apply(churnTrainNum, MARGIN=2, FUN=mean)
desviaciones <- apply(churnTrainNum, MARGIN=2, FUN=sd)
churnTrainNorm <- t(apply(churnTrainNum, MARGIN=1, FUN=function(x) (x - promedios)/desviaciones))
churnTestNorm  <- t(apply(churnTestNum,  MARGIN=1, FUN=function(x) (x - promedios)/desviaciones))
predictions <- knn(train=churnTrainNorm,
test=churnTestNorm,
churnTrain[, 12],
k=13)
table(predictions, churnTest[,12])
(table(predictions, churnTest[,12])[1]+table(predictions, churnTest[,12])[4]) / 5000
set.seed(3456)
trainIndex <- createDataPartition(churn$LEAVE, p = .75, list = FALSE, times = 1)
churnTrain <- churn[ trainIndex, c(2,3,4,5,6,7,8, 12)]
churnTest <-  churn[-trainIndex, c(2,3,4,5,6,7,8, 12)]
train(LEAVE~COLLEGE, churnTrain, method="knn")
train(LEAVE~churnTrain$COLLEGE, churnTrain, method="knn")
View(churnTrain)
train(LEAVE~., churnTrain, method="knn")
train(churnTrain, churnTrain$LEAVE, method='knn')
train(churnTrain[,c(1,2,3)], churnTrain$LEAVE, method='knn')
train(churnTrain[,c(1), drop=FALSE], churnTrain$LEAVE, method='knn')
set.seed(3456)
model_knn1 <- train(LEAVE~., churnTrain,
method='knn')  # y el k?
model_knn1
