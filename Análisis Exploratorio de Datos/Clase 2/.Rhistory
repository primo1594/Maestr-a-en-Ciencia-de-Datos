knitr::opts_chunk$set(echo = TRUE)
#Ejecute las siguientes tres líneas de código para crear las variables
x = c(1, 2, 4, 7, 9, 0)
y = 4
z = c(0.5, 2, 3, 5, 1, 0)
# Escriba en el siguiente espacio la operación suma entre "x" y "y", y asígnelo a resultado_suma (1 línea de código)
resultado_suma <-
# Escriba en el siguiente espacio la operación multiplicación entre "x" y "z", y asígnelo a resultado_multiplicacion (1 línea de código)
resultado_multiplicacion <-
# Escriba en el siguiente espacio la operación multiplicación negativa a "z", y asígnelo a resultado_negativo (1 línea de código)
resultado_negativo <-
# Escriba en el siguiente espacio la operación de raíz cuadrada "y", y asígnelo a resultado_raiz (1 línea de código)
resultado_raiz <-
# Escriba en el siguiente espacio la operación lógica de igualdad entre "x" y "z", y asígnelo a resultado_igualdad (1 línea de código)
resultado_igualdad <-
# Escriba en el siguiente espacio la operación lógica de diferencia entre "x" y "y", y asígnelo a resultado_igualdad (1 línea de código)
resultado_diferencia <-
# --------------------------- #
# Ahora ejecute las siguientes líneas de código que le permitirán observar los resultados de sus operaciones.
print("Resultado Suma")
resultado_suma
print("Resultado multiplicación")
resultado_multiplicacion
print("Resultado negativo")
resultado_negativo
print("Resultado raíz cuadrada")
resultado_raiz
print("Resultado de operación lógica: igualdad")
resultado_igualdad
print("Resultado de operación lógica: diferencia")
resultado_diferencia
x = c(1, 2, 4, 7, 9, 0)
y = 4
z = c(0.5, 2, 3, 5, 1, 0)
x = c(1, 2, 4, 7, 9, 0)
y = 4
z = c(0.5, 2, 3, 5, 1, 0)
#Ejecute las siguientes tres líneas de código para crear las variables
x = c(1, 2, 4, 7, 9, 0)
y = 4
z = c(0.5, 2, 3, 5, 1, 0)
# Escriba en el siguiente espacio la operación suma entre "x" y "y", y asígnelo a resultado_suma (1 línea de código)
resultado_suma <- x+y
# Escriba en el siguiente espacio la operación multiplicación entre "x" y "z", y asígnelo a resultado_multiplicacion (1 línea de código)
resultado_multiplicacion <- x*z
# Escriba en el siguiente espacio la operación multiplicación negativa a "z", y asígnelo a resultado_negativo (1 línea de código)
resultado_negativo <- -z
# Escriba en el siguiente espacio la operación de raíz cuadrada "y", y asígnelo a resultado_raiz (1 línea de código)
resultado_raiz <- sqrt(y)
# Escriba en el siguiente espacio la operación lógica de igualdad entre "x" y "z", y asígnelo a resultado_igualdad (1 línea de código)
resultado_igualdad <- x==z
# Escriba en el siguiente espacio la operación lógica de diferencia entre "x" y "y", y asígnelo a resultado_igualdad (1 línea de código)
resultado_diferencia <- x!=y
# --------------------------- #
# Ahora ejecute las siguientes líneas de código que le permitirán observar los resultados de sus operaciones.
print("Resultado Suma")
resultado_suma
print("Resultado multiplicación")
resultado_multiplicacion
print("Resultado negativo")
resultado_negativo
print("Resultado raíz cuadrada")
resultado_raiz
print("Resultado de operación lógica: igualdad")
resultado_igualdad
print("Resultado de operación lógica: diferencia")
resultado_diferencia
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
install.packages("nycflights13")
#install.packages("tidyverse")
#install.packages("nycflights13")
#install.packages("xts")
install.packages("PerformanceAnalytics")
anova(reg2,reg1)
data<-read.csv(file.choose())
head(data,3)
D<-year>=1991
data$D<-as.numeric(D)
data[29:36,]
reg1<-lm(log_PIB_Col~D+log_PIB_USA+D*log_PIB_USA,data = data)
reg2<-lm(log_PIB_Col~log_PIB_USA,data=data)
anova(reg2,reg1)
data<-read.csv(file.choose())
attach(data)
D<-year>=1991
data$D<-as.numeric(D)
data[29:36,]
reg1<-lm(log_PIB_Col~D+log_PIB_USA+D*log_PIB_USA,data = data)
reg2<-lm(log_PIB_Col~log_PIB_USA,data=data)
anova(reg2,reg1)
data <- read_excel(file.choose())
library(readxl)
data <- read_excel(file.choose())
setwd("F:/GitHub/Maestría en Ciencia de Datos/Análisis Exploratorio de Datos/Clase 1")
data<-read.table(custdata.tsv, sep = '\t', header = TRUE)
data<-read.table("custdata.tsv", sep = '\t', header = TRUE)
head(data)
plot(data)
summary(data)
library(dplyr)
data2<-filter(data,data$health.ins==F)
summary(data2)
library(ggplot2)
ggplot(data, aes(x=" ",y=data$income))+
geom_boxplot()+
geom_jitter(width=0.2)+ylab("yearly income in thousands")
+xlab("# of customers")
ggplot(data,aes(x=data$age))+
geom_histogram()+xlab("Customer age")+
geom_density()+
geom_vline(aes(xintercept=mean(age)),color="blue",linetype="dashed",size=1)
intervalosIncome = c(100,1000,10000,100000)
sapply(intervalosIncome,log10)
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks<-c(100,1000,10000,100000),labels=dollar)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks<-c(100,1000,10000,100000),labels<-dollar)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-log10(income)))
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks<-c(100,1000,10000,100000),labels-dollar)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000),labels-dollar)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000))+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000),labels-dollar)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000),labels=dollar)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000),labels=dollars)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000),labels="dollars")+annotation_logticks(sides="bt")
library(scales)
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000),labels=dollars)+annotation_logticks(sides="bt")
ggplot(data)+geom_density(aes(x<-income))+scale_x_log10(breaks=c(100,1000,10000,100000),labels=dollar)+annotation_logticks(sides="bt")
table(data$sex)
tabla<-table(data$sex)
prop.table(rabla)
prop.table(tabla)
uniqv[which.max(tabulate(match(v,uniqv)))]
getmode <- function(v){
uniqv<-unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
getmode(data$state.of.res)
ggplot(data)+geom_bar(aes(x=data$marital.stat),fill="gray")
setwd("F:/GitHub/Maestría en Ciencia de Datos/Análisis Exploratorio de Datos/Clase 2")
data<-read.csv(train_clase)
data<-read.csv("train_clase")
data<-read.csv("train_clase.csv")
dim(data)
head(data)
head(data,3)
View(data)
View(data)
data<-read.csv("train_clase.csv",sep=';')
dim(data)
head(data,3)
tail(data,3)
head(data)
tail(data)
nrow(data)
ncol(data)
dim(data)
# configuremos nuestro entorno de trabajo
knitr::opts_knit$set(root.dir = "D:/Usuarios/rhaps/Documents/Challenges/kaggle/house_prices")
train2 <- train
# Configuremos nuestro directorio de trabajo
#setwd(choose.dir())
#setwd("D:/Usuarios/rhaps/OneDrive/Clases/2019-1/Analisis exploratorio/clase3")
# Observe primero el formato de los csv
# carguemos los datos de entrenamiento y testeo con los factores como caracteres
#train <-read.csv(file.choose(), stringsAsFactors=FALSE)
train <-read.csv2("train_clase.csv", stringsAsFactors=FALSE)
test <-read.csv(file.choose(), stringsAsFactors=FALSE)
View(test)
View(train)
# las primeras y últimas filas de la bd
head(train)
tail(train)
train2 <- train
colnames(train2)<- tolower(colnames(train2))
View(train2)
train2$yearbuilt <- as.Date(paste0(train2$yearbuilt, '-01-01'))
train2$yearremodadd <- as.Date(paste0(train2$yearremodadd, '-01-01'))
# diapositiva 23
train2$datesold <- as.POSIXct(paste0(train2$yrsold,"-", train2$mosold, "-01"), format="%Y-%m-%d")
train[yearbuilt]
train["yearbuilt"]
train[,"yearbuilt"]
head(train2$yearbuilt)
head(train$yearbuilt)
head(train$YearBuilt)
head(train$YearRemodAdd)
head(train$MoSold)
head(train$YrSold)
# la variable más sensible a tener datos duplicados es el identificador
train2[duplicated(train2$id),]
# eliminemos los registros duplicados
train2 <- train2[!duplicated(train2),]
head(train$Street)
head(factor(train$Street)
head(factor(train$Street))
head(table(factor(train$Street)))
head(table(factor(train$LotConfig)))
table(factor(train$Street))
table(factor(train$LotConfig))
train2[train2$street=="Pabe",]$street <- "Pave"
train2[train2$lotconfig=="Fr3",]$lotconfig <- "FR3"
train2$street <- str_trim(train2$street)
library(stringr)
train2$street <- str_trim(train2$street)
table(factor(train2$lotconfig))
table(factor(train2$street))
table(factor(train2$lotconfig))
table(train&lotconfig)
table(train2&lotconfig)
table(train$LotConfig)
